// Test avanc√© du moteur IA AFRIQUADIS
import { quickSymptomAnalysis, runDiagnostic } from './diagnosticEngine';

export function testAIEngineComprehensive() {
  console.log('üß™ Test Complet du Moteur IA AFRIQUADIS...');
  console.log('=' .repeat(60));
  
  const testResults = {
    totalTests: 0,
    passedTests: 0,
    failedTests: 0,
    diagnosticsFound: 0,
    averageScore: 0,
    totalScore: 0
  };

  // Test 1: Sympt√¥mes grippaux
  console.log('\nüìã Test 1: Sympt√¥mes grippaux');
  const fluSymptoms = ['fievre', 'frissons', 'fatigue_extreme', 'courbatures'];
  testResults.totalTests++;
  
  try {
    const analysis = quickSymptomAnalysis(fluSymptoms);
    const diagnostic = runDiagnostic(fluSymptoms);
    
    if (Array.isArray(analysis) && analysis.length > 0) {
      console.log('‚úÖ Analyse des sympt√¥mes: SUCC√àS');
      testResults.passedTests++;
    } else {
      console.log('‚ùå Analyse des sympt√¥mes: √âCHEC');
      testResults.failedTests++;
    }
    
    if (Array.isArray(diagnostic) && diagnostic.length > 0) {
      console.log('‚úÖ Diagnostic trouv√©:', diagnostic.length, 'pathologies');
      testResults.diagnosticsFound += diagnostic.length;
      testResults.passedTests++;
      
      diagnostic.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.pathology.name} (Score: ${result.score}%)`);
        testResults.totalScore += result.score;
      });
    } else {
      console.log('‚ùå Aucun diagnostic trouv√© pour les sympt√¥mes grippaux');
      testResults.failedTests++;
    }
  } catch (error) {
    console.error('üí• Erreur lors du test grippal:', error);
    testResults.failedTests++;
  }

  // Test 2: Sympt√¥mes digestifs
  console.log('\nüìã Test 2: Sympt√¥mes digestifs');
  const digestiveSymptoms = ['nausees', 'douleurs_abdominales', 'perte_appetit'];
  testResults.totalTests++;
  
  try {
    console.log('Analysis:', quickSymptomAnalysis(digestiveSymptoms));
    const diagnostic = runDiagnostic(digestiveSymptoms);
    
    if (Array.isArray(diagnostic) && diagnostic.length > 0) {
      console.log('‚úÖ Diagnostic digestif trouv√©:', diagnostic.length, 'pathologies');
      testResults.diagnosticsFound += diagnostic.length;
      testResults.passedTests++;
      
      diagnostic.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.pathology.name} (Score: ${result.score}%)`);
        testResults.totalScore += result.score;
      });
    } else {
      console.log('‚ùå Aucun diagnostic trouv√© pour les sympt√¥mes digestifs');
      testResults.failedTests++;
    }
  } catch (error) {
    console.error('üí• Erreur lors du test digestif:', error);
    testResults.failedTests++;
  }

  // Test 3: Sympt√¥mes respiratoires
  console.log('\nüìã Test 3: Sympt√¥mes respiratoires');
  const respiratorySymptoms = ['toux_persistante', 'mal_gorge', 'congestion_nasale'];
  testResults.totalTests++;
  
  try {
    const diagnostic = runDiagnostic(respiratorySymptoms);
    
    if (Array.isArray(diagnostic) && diagnostic.length > 0) {
      console.log('‚úÖ Diagnostic respiratoire trouv√©:', diagnostic.length, 'pathologies');
      testResults.diagnosticsFound += diagnostic.length;
      testResults.passedTests++;
      
      diagnostic.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.pathology.name} (Score: ${result.score}%)`);
        testResults.totalScore += result.score;
      });
    } else {
      console.log('‚ùå Aucun diagnostic trouv√© pour les sympt√¥mes respiratoires');
      testResults.failedTests++;
    }
  } catch (error) {
    console.error('üí• Erreur lors du test respiratoire:', error);
    testResults.failedTests++;
  }

  // Test 4: Sympt√¥mes mixtes
  console.log('\nüìã Test 4: Sympt√¥mes mixtes');
  const mixedSymptoms = ['fievre', 'nausees', 'fatigue_extreme'];
  testResults.totalTests++;
  
  try {
    const diagnostic = runDiagnostic(mixedSymptoms);
    
    if (Array.isArray(diagnostic) && diagnostic.length > 0) {
      console.log('‚úÖ Diagnostic mixte trouv√©:', diagnostic.length, 'pathologies');
      testResults.diagnosticsFound += diagnostic.length;
      testResults.passedTests++;
      
      diagnostic.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.pathology.name} (Score: ${result.score}%)`);
        testResults.totalScore += result.score;
      });
    } else {
      console.log('‚ùå Aucun diagnostic trouv√© pour les sympt√¥mes mixtes');
      testResults.failedTests++;
    }
  } catch (error) {
    console.error('üí• Erreur lors du test mixte:', error);
    testResults.failedTests++;
  }

  // Test 5: Sympt√¥mes uniques
  console.log('\nüìã Test 5: Sympt√¥mes uniques');
  const uniqueSymptoms = ['maux_tete'];
  testResults.totalTests++;
  
  try {
    const diagnostic = runDiagnostic(uniqueSymptoms);
    
    if (Array.isArray(diagnostic) && diagnostic.length > 0) {
      console.log('‚úÖ Diagnostic unique trouv√©:', diagnostic.length, 'pathologies');
      testResults.diagnosticsFound += diagnostic.length;
      testResults.passedTests++;
      
      diagnostic.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result.pathology.name} (Score: ${result.score}%)`);
        testResults.totalScore += result.score;
      });
    } else {
      console.log('‚ùå Aucun diagnostic trouv√© pour les sympt√¥mes uniques');
      testResults.failedTests++;
    }
  } catch (error) {
    console.error('üí• Erreur lors du test unique:', error);
    testResults.failedTests++;
  }

  // R√©sultats finaux
  console.log('\n' + '=' .repeat(60));
  console.log('üìä R√âSULTATS FINAUX DES TESTS IA');
  console.log('=' .repeat(60));
  
  testResults.averageScore = testResults.totalScore / Math.max(testResults.diagnosticsFound, 1);
  
  console.log(`Total des tests: ${testResults.totalTests}`);
  console.log(`Tests r√©ussis: ${testResults.passedTests}`);
  console.log(`Tests √©chou√©s: ${testResults.failedTests}`);
  console.log(`Diagnostics trouv√©s: ${testResults.diagnosticsFound}`);
  console.log(`Score moyen: ${testResults.averageScore.toFixed(1)}%`);
  
  const successRate = (testResults.passedTests / testResults.totalTests) * 100;
  console.log(`Taux de succ√®s: ${successRate.toFixed(1)}%`);
  
  if (testResults.diagnosticsFound > 0) {
    console.log('üéâ SUCC√àS: Le syst√®me IA trouve des diagnostics !');
  } else {
    console.log('‚ùå √âCHEC: Aucun diagnostic trouv√© par le syst√®me IA');
  }
  
  console.log('=' .repeat(60));
  
  return {
    success: testResults.diagnosticsFound > 0,
    diagnosticsFound: testResults.diagnosticsFound,
    successRate: successRate,
    averageScore: testResults.averageScore
  };
}

// Test rapide pour validation
export async function quickAITest() {
  console.log('üöÄ Test Rapide IA...');
  
  const symptoms = ['fievre', 'fatigue_extreme'];
    const result = await runDiagnostic(symptoms);

  if (result.length > 0) {
    console.log('‚úÖ Diagnostic trouv√©:', result[0].pathologyId);
    return true;
  } else {
    console.log('‚ùå Aucun diagnostic trouv√©');
    return false;
  }
}
